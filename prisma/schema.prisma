// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String @unique
  name              String
  passwordHash      String
  firstUserRoom     RoomChat[] @relation("firstUserRoom")
  secondUserRoom    RoomChat[] @relation("secondUserRoom")
  sentMessages      Message[] @relation("sender")
  receiveMessages   Message[] @relation("receiver")
}

model Message{
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId      String  @db.Uuid
  receiverId    String  @db.Uuid
  createdAt     DateTime  @default(now())
  hashedMessage String
  roomChatId    Int? 
  roomChat      RoomChat?   @relation(fields: [roomChatId], references: [id])
  sender        User  @relation("sender", fields: [senderId], references: [id])
  receiver      User @relation("receiver", fields: [receiverId], references: [id])
  isSigned      Boolean   @default(false)
  signature     String?
  ecegVal       String    @default("")
}

model RoomChat{
  id  Int @id @default(autoincrement())
  firstUserId String  @db.Uuid
  secondUserId String @db.Uuid
  firstUser User @relation("firstUserRoom", fields: [firstUserId], references: [id])
  secondUser User @relation("secondUserRoom", fields: [secondUserId], references: [id])
  messages Message[]
  createdAt DateTime @default(now())
}


